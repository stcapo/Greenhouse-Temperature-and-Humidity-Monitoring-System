C51 COMPILER V9.60.7.0   LCD                                                               07/10/2024 20:50:30 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN .\Objects\LCD.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE LCD.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\LCD.l
                    -st) OBJECT(.\Objects\LCD.obj)

line level    source

   1          #include "LCD.h"
   2          
   3          
   4          unsigned char code pic[8][8]={
   5          {0x04,0x0E,0x15,0x04,0x04,0x04,0x04,0x00},//¡ü
   6          {0x00,0x04,0x04,0x04,0x04,0x15,0x0E,0x04},//¡ý
   7          {0x00,0x04,0x08,0x1F,0x08,0x04,0x00,0x00},//¡û
   8          {0x00,0x04,0x02,0x1F,0x02,0x04,0x00,0x00},//¡ú
   9          {0x04,0x04,0x0A,0x1F,0x1F,0x0A,0x04,0x04},//Õ¼Î»·û
  10          {0x00,0x1f,0x00,0x1f,0x0a,0x0a,0x13,0x00},// Ôª
  11          {0,0,0,0x1f,0,0,0,0}, // -
  12          {0,0,0,0x1f,0x1f,0,0,0} // =
  13          }; 
  14          unsigned char code test[8] = {0x07,0x05,0x07,0x00,0x00,0x00,0x00,0x00};
  15          
  16          #define LCD_DATA P1
  17          
  18          sbit RS = P2^0;
  19          sbit EN = P2^1;
  20          
  21          
  22          
  23          void lcd_command(unsigned char command) {
  24   1          LCD_DATA = command;
  25   1          RS = 0;
  26   1          EN = 1;
  27   1          delay_ms(1);
  28   1          EN = 0;
  29   1      }
  30          
  31          void lcd_data(unsigned char dat) {
  32   1          LCD_DATA = dat;
  33   1          RS = 1;
  34   1          EN = 1;
  35   1          delay_ms(1);
  36   1          EN = 0;
  37   1      }
  38          
  39          void lcd_init() {
  40   1              //unsigned char num; // µÚ¼¸¸öÊý¾Ý£¬ ÏÔÊ¾ÔÚÆÁÄ»ÉÏ´Ó×óÏòÓÒµÄË÷Òý
  41   1          delay_ms(15); // ³õÊ¼»¯ÑÓÊ±
  42   1          lcd_function_set();
  43   1          delay_ms(5); // Ôö¼ÓÑÓÊ±
  44   1          lcd_display_set();
  45   1              
  46   1          delay_ms(5); // Ôö¼ÓÑÓÊ±
  47   1          lcd_entry_mode_set();
  48   1              
  49   1          delay_ms(5); // Ôö¼ÓÑÓÊ±
  50   1          lcd_clear_display();
  51   1          delay_ms(5); // Ôö¼ÓÑÓÊ±
  52   1              
  53   1              load_customized_char(test); // ¼ÓÔØ 1 ¸ö×Ô¶¨Òå×Ö·ûµ½ CGRAM
  54   1              
C51 COMPILER V9.60.7.0   LCD                                                               07/10/2024 20:50:30 PAGE 2   

  55   1          /*for (num = 0; num < 8; num++) {
  56   1              load_customized_char_array8(num, pic[num]); // ¼ÓÔØ 8 ¸ö×Ô¶¨Òå×Ö·ûµ½ CGRAM
  57   1          }*/
  58   1      }
  59          
  60          void lcd_clear_display(){
  61   1              lcd_command(0x01); // write 20H(data) to DDRAM to display a space; set AC to 00H
  62   1      }
  63          
  64          void lcd_return_home(){
  65   1              lcd_command(0x20);// set address counter(AC) to 00H, return the cursor to original position(the lefttop);
             - return the screen to original position if it shifted;  not changing the DDRAM;
  66   1      }
  67          void lcd_entry_mode_set(){
  68   1              lcd_command(0x06);// keep screen position and right roll for the cursor when entry; 
  69   1      }
  70          void lcd_display_set(){ // control the screen and cursor switch
  71   1              lcd_command(0x0c); // blink on; cursor off; screen on;
  72   1      }
  73          void lcd_cursor_or_screen_shift(){
  74   1              lcd_command(0x18); // screen right shift will cause the string left shift;
  75   1              // 0x18 in binary: 0001 1000
  76   1              // Bit 4 (1) - check the screen or cursor shift
  77   1              // Bit 3 (1) - S/C : Screen/Cursor (1 = Screen, 0 = cursor)
  78   1              // Bit 2 (0) - L/R : Shift direction (1 = Left, 0 = Right)
  79   1              // Bit 1 (0) - Unused
  80   1              // Bit 0 (0) - Unused
  81   1      }
  82          void lcd_function_set(){
  83   1              lcd_command(0x38); // 8Î»Ä£Ê½, 2ÐÐ, 5x7µãÕó
  84   1              // 0x38 in binary: 0011 1000
  85   1              // Bit 7 (0) - Unused
  86   1              // Bit 6 (0) - Unused
  87   1              // Bit 5 (1) - 8-bit interface
  88   1              // Bit 4 (1) - 2 lines display
  89   1              // Bit 3 (1) - 5x7 dots format
  90   1              // Bits 2-0 (000) - Unused
  91   1      }
  92          void lcd_set_CGRAM_address(unsigned char offset){
  93   1              // set CGRAM address to AC
  94   1              if(offset>0x40) offset = 0;
  95   1              lcd_command(0x40+offset); 
  96   1      }
  97          void lcd_set_DDRAM_address(unsigned char offset){
  98   1              // set DDRAM address to AC
  99   1              if(offset>0x80) offset = 0;
 100   1              lcd_command(0x80+offset);
 101   1      }
 102          
 103          void goto_XY(unsigned char x,unsigned char y){
 104   1              // DDRAM address counter(AC) ---- coordinate of the display
 105   1              if(x>0x27) x = 0x27;
 106   1              
 107   1          if (y == 0) {
 108   2              lcd_set_DDRAM_address(x);
 109   2          } else {
 110   2              lcd_set_DDRAM_address(x+0x40); 
 111   2          }
 112   1      }
 113          void displaydec_lt9(unsigned char num){
 114   1              num %=10;
 115   1              lcd_data(num+'0');
C51 COMPILER V9.60.7.0   LCD                                                               07/10/2024 20:50:30 PAGE 3   

 116   1      }
 117          void displaydec_lt256(unsigned char num){ // 253  --- {3,5,2} 2 --- {2}
 118   1              unsigned char a[4];
 119   1              unsigned char i=0;
 120   1              if(num!=0){
 121   2                      while(num>0){
 122   3                              a[i++] = num%10 +'0';
 123   3                              num/=10;
 124   3                      }
 125   2              }else{
 126   2                      a[i] = '0';
 127   2              }
 128   1              while(i){
 129   2                      lcd_data(a[--i]);
 130   2              }
 131   1      }
 132          void displaydec_lt65536(unsigned int num){ 
 133   1              unsigned char a[6];
 134   1              unsigned char i=0;
 135   1              if(num!=0){
 136   2                      while(num>0){
 137   3                              a[i++] = num%10 +'0';
 138   3                              num/=10;
 139   3                      }
 140   2              }else{
 141   2                      a[i] = '0';
 142   2              }
 143   1              while(i){
 144   2                      lcd_data(a[--i]);
 145   2              }
 146   1      }
 147          void displaydec_lt4294967296(unsigned long num){ 
 148   1              unsigned char a[11];
 149   1              unsigned char i=0;
 150   1              if(num!=0){
 151   2                      while(num>0){
 152   3                              a[i++] = num%10 +'0';
 153   3                              num/=10;
 154   3                      }
 155   2              }else{
 156   2                      a[i] = '0';
 157   2              }
 158   1              while(i){
 159   2                      lcd_data(a[--i]);
 160   2              }
 161   1      }
 162          void displayhex_ltFF(unsigned char hex){ // 3F 0011 1111  ---- 0011 
 163   1              unsigned char temp;
 164   1              temp = hex>>4;
 165   1              temp>9?lcd_data(temp-10+'A'):lcd_data(temp+'0');
 166   1              temp = hex&0x0F;
 167   1              temp>9?lcd_data(temp-10+'A'):lcd_data(temp+'0');
 168   1      }
 169          void display_string(char *s){
 170   1              while(*s!='\0'){
 171   2                      lcd_data(*s++);
 172   2              }
 173   1      }
 174          void load_customized_char(unsigned char * _test){
 175   1              char offset;
 176   1              lcd_set_CGRAM_address(offset);
 177   1              for(offset=0;offset<8;offset++){
C51 COMPILER V9.60.7.0   LCD                                                               07/10/2024 20:50:30 PAGE 4   

 178   2                      lcd_data(_test[offset]); // lcd_dataµÄÊ±ºò£¬LCDÏÈ¿´ÓÐÃ»ÓÐÉèÖÃCGRAMµÄµØÖ·£¬Èç¹ûÉèÖÃÁË£¬¾Í°ÑÊý¾ÝÐ´Èëµ½¸ÕÉè
             -ÖÃµÄµØÖ·£¬Èç¹ûÃ»ÉèÖÃ£¬¾ÍÕý³£Ð´ÈëDDRAMµØÖ·µÄÏÔÊ¾¿é
 179   2              }
 180   1              lcd_set_DDRAM_address(0);
 181   1      }
 182          void display_customized_char(){
 183   1              lcd_data(0); // lcd_dataµÄÊ±ºò£¬LCDÏÈ¿´CGRAMÖÐµÄ0µØÖ·ÓÐÃ»ÓÐÊý¾Ý£¬Èç¹ûÓÐ¾ÍÐ´Èëµ½DDRAMµØÖ·µÄÏÔÊ¾¿éÖÐ£¬Ã»ÓÐ¾
             -ÍÔÚDDRAMµØÖ·µÄÏÔÊ¾¿éÏÔÊ¾asciiÂëÎª0µÄ×Ö·û
 184   1      }
 185          void load_customized_char_array8(unsigned char i0to7, unsigned char * _code) {
 186   1          char offset;
 187   1          i0to7 = i0to7 << 3; // ×óÒÆ 3 Î»£¬Ïàµ±ÓÚ³ËÒÔ 8£¬µÃµ½µ±Ç°×Ô¶¨Òå×Ö·ûµÄÆðÊ¼µØÖ·
 188   1      
 189   1          for (offset = 0; offset < 8; offset++) {
 190   2              lcd_set_CGRAM_address(i0to7+offset); // ÉèÖÃ CGRAM µØÖ·£¬0x40 ÊÇÃüÁîÇ°×º
 191   2              lcd_data(_code[offset]); // ½«×Ö·ûÊý¾ÝÐ´Èë CGRAM Ã¿¸ö_code[i]¾ÍÊÇÒ»¸ö×Ö½Ú£¬±ÈÈçµÚÒ»¸ö×Ö½Ú£º0x04µÄº
             -óÎåÎ»´ú±íÆäÖÐµÄÒ»¸öÎ»±»µãÁÁ
 192   2          }
 193   1              lcd_set_DDRAM_address(0); // ÉèÖÃ DDRAM µØÖ·Îª 0x80
 194   1      }
 195          
 196          void display_customized_char_array8() {
 197   1          unsigned char num;
 198   1          for (num = 0; num < 8; num++) {
 199   2              lcd_data(num); // ÏÔÊ¾ 8 ¸ö×Ô¶¨Òå×Ö·û
 200   2          }
 201   1      }
 202          
 203          
 204          
 205          
 206          /*
 207          00000
 208          11111
 209          00000
 210          11111
 211          01010
 212          01010
 213          10011
 214          00000
 215                  
 216            1  
 217           111
 218          1 1 1
 219            1
 220            1
 221            1
 222            1
 223            1
 224            
 225          00000
 226          00000
 227          00000
 228          11111
 229          00000
 230          00000
 231          00000
 232          00000   
 233          
 234          00111
 235          00101
 236          00111
C51 COMPILER V9.60.7.0   LCD                                                               07/10/2024 20:50:30 PAGE 5   

 237          00000
 238          00000
 239          00000
 240          00000
 241          00000   
 242          
 243          */
 244          
 245          
 246          
 247          
*** WARNING C316 IN LINE 247 OF LCD.c: unterminated conditionals


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    694    ----
   CONSTANT SIZE    =     72    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      44
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
